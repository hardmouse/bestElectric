import { AbstractGallery, GalleryOptions, ModelAttributes } from './AbstractGallery';
import { Item } from '../Item';
import { Column } from '../Column';
export interface MasonryGalleryOptions extends GalleryOptions {
    columnWidth: number;
}
export declare class Masonry<Model extends ModelAttributes = any> extends AbstractGallery {
    protected defaultOptions: MasonryGalleryOptions;
    protected options: MasonryGalleryOptions;
    protected columns: Column[];
    protected init(): void;
    protected onScroll(): void;
    protected onPageAdd(): void;
    /**
     * Returns here the number of columns
     */
    protected getEstimatedItemsPerRow(): number;
    protected getEstimatedRowsPerPage(): number;
    /**
     * Use current gallery height as reference. To fill free space it add images until the gallery height changes, then are one more row
     */
    protected addUntilFill(): number;
    private addItemsToDom(nbItems);
    protected addItemToDOM(item: Item<Model>, destination?: HTMLElement): void;
    protected endResize(): void;
    protected addColumns(): void;
    /**
     * Compute sides with 1:1 ratio
     * @param items
     * @param fromIndex
     * @param toIndex
     */
    protected organizeItems(items: Item[], fromIndex?: number, toIndex?: number): void;
    /**
     * Return square side size
     */
    private getColumnWidth();
    private getShortestColumn();
    protected empty(): void;
}
